HTTP stands for hypertext transfer protocol, and it is the basis for almost all web applications. More specifically, HTTP is the method computers and servers use to request and send information. 
For instance, when someone navigates to GOOGLE.com on their laptop, their web browser sends an HTTP request to the GOOGLE servers for the content that appears on the page. 
Then, GOOGLE servers send HTTP responses with the text, images, and formatting that the browser displays to the user.
The first usable version of HTTP was created in 1997. Because it went through several stages of development, this first version of HTTP was called HTTP/1.1.
This version is still in use on the web. In 2015, a new version of HTTP called HTTP/2 was created.
HTTP/2 solves several problems that the creators of HTTP/1.1 did not anticipate. 
In particular, HTTP/2 is much faster and more efficient than HTTP/1.1.
One of the ways in which HTTP/2 is faster is in how it prioritizes content during the loading process.
In the context of web performance, prioritization refers to the order in which pieces of content are loaded. 
Suppose a user visits a news website and navigates to an article. Should the photo at the top of the article load first OR Should the text of the article load first OR 
Should the banner ads load first?. This is decided by the prioritization concept.
 Apart from these differences some major differences between HTTP1.1 Vs HTTP2 is:
 
 Multiplexing: HTTP/1.1 loads resources one after the other, so if one resource cannot be loaded, it blocks all the other resources behind it. 
 In contrast, HTTP/2 is able to use a single TCP connection to send multiple streams of data at once so that no one resource blocks any other resource.
 
 Server push: Typically, a server only serves content to a client device if the client asks for it. 
 However, this approach is not always practical for modern webpages, which often involve several dozen separate resources that the client must request.
 HTTP/2 solves this problem by allowing a server to "push" content to a client before the client asks for it.
 
